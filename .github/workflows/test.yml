name: test

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:
    inputs:
      args:
        description: "Anitester extra arguments"
        default: ""
        required: false
      lang:
        description: "Language of extensions to test (like es/en/pt, only one)"
        default: ""
        required: false
      git-repo:
        description: "Custom tester repo (default: Claudemirovsky/aniyomi-extensions-tester)"
        default: ""
        required: false
env:
  REPO: Claudemirovsky/cursedyomi-extensions

jobs:
  prepare:
    name: Prepare job
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
      jar: ${{ steps.get-jar.outputs.jar }}
      id: ${{ steps.get-jar.outputs.id }}
      tag: ${{ steps.get-jar.outputs.tag }}
    steps:
      - name: generate matrix
        id: gen-matrix
        run: |
          wget 'https://raw.githubusercontent.com/${{ env.REPO }}/repo/index.min.json'

          BATCHES=$(jq -cr '
          {
              batches: [
                  map(
                      select(.lang | test("${{ github.event.inputs.lang }}")) # Filter by language
                      | .apk # Get apk filename
                  ) | _nwise(5) # Split in chunks of 5 items each
              ] | to_entries | map({apks:.value, index:.key}) # [[apk1, apk2..], [apk3, apk4...]] -> [{apks: [apk1, apk2..], index: 0}, ...]
          }' index.min.json)
          echo "matrix=$BATCHES" >> $GITHUB_OUTPUT

      - name: get tester jar
        id: get-jar
        env:
          TESTER_REPO: Claudemirovsky/aniyomi-extensions-tester
        run: |
          if [[ '${{ github.event.inputs.git-repo }}' != '' ]]; then
             TESTER_REPO='${{ github.event.inputs.git-repo }}'
          fi
          API_URL="https://api.github.com/repos/$TESTER_REPO/releases/latest"
          wget --header='authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' $API_URL -O latest.json
          JAR=$(jq -cr '.assets[1].browser_download_url' latest.json)
          ID=$(jq -cr '.assets[1].id' latest.json)
          TAG=$(jq -cr '.tag_name' latest.json)
          echo "jar=$JAR" >> $GITHUB_OUTPUT
          echo "id=$ID" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  test_batches:
    name: test batches of extensions
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: zulu

      - uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-ani-${{ needs.prepare.outputs.tag }}-${{ needs.prepare.outputs.id }}

      - uses: actions/cache@v4
        id: cache
        with:
          path: tester.jar
          key: anitester-${{ needs.prepare.outputs.tag }}-${{ needs.prepare.outputs.id }}

      - name: dl tester
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          JAR=${{ needs.prepare.outputs.jar }}
          wget $JAR -O tester.jar

      - name: dl apks
        id: dl-apks
        run: |
          APKS='${{ toJSON(matrix.batches) }}'
          INDEX=$(jq -cr '.index' <<< $APKS)
          echo "index=$INDEX" >> $GITHUB_OUTPUT
          jq -cr '.apks | .[]' <<< $APKS | while read link; do
            wget --header='authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://raw.githubusercontent.com/${{ env.REPO }}/repo/apk/$link -P apk/
          done

      - name: test apks
        run: |
          Xvfb -ac :99 -screen 0 1280x1024x16 > /dev/null 2>&1 &
          export DISPLAY=:99.0
          EXTRA_ARGS=""
          if [[ -n '${{ secrets.PREFERENCES }}' ]]; then
              echo '${{ secrets.PREFERENCES }}' > preferences.json
              EXTRA_ARGS+="--prefs preferences.json "
          fi
          if [[ -n '${{ secrets.COOKIES }}' ]]; then
              echo '${{ secrets.COOKIES }}' > cookies.txt
              EXTRA_ARGS+="--cookies cookies.txt "
          fi
          # java -jar tester.jar apk -C -D json -P -d
          java -jar tester.jar apk --complete-results --json-dir json --pretty-json --debug $EXTRA_ARGS ${{ github.event.inputs.args }}

      - name: upload results
        uses: actions/upload-artifact@v4
        with:
          name: "results-${{ steps.dl-apks.outputs.index }}"
          path: "json/"
          retention-days: 1

  generate_results:
    name: generate the results
    needs: test_batches
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: results

      - name: get results
        uses: actions/download-artifact@v4

      - name: Create results README
        run: |
          set -x

          [[ -e results ]] && rm -rf results
          mkdir -p results
          mv results-*/*.json results/
          rm -df results-*

          pip install py-markdown-table
          wget --header='authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://raw.githubusercontent.com/Claudemirovsky/cursed-aet/master/.github/scripts/cursed-aet-table-gen.py
          python cursed-aet-table-gen.py results
          rm -rf cursed-aet-table-gen.py

      - name: commit changes
        run: |
          git lfs install
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          MSG="Update result files"
          if [[ $(git log -1 --pretty=format:%s) =~ "$MSG" ]]; then
            git commit --amend --no-edit
            git push --force
          else
            git commit -m "$MSG"
            git push
          fi
